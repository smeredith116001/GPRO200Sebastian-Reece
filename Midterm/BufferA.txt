// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER A TAB (scene)

//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    float i = texture(iChannel0, vec2(vp.uv.x, 0.15)).r;
    sSphere sphere;
    initSphere(vec3(0.0, 0.0, -4.0), i, sphere);
    
    vec3 dp;
    dp.xy = ray.direction.xy - sphere.center.xy;
    float lSq = lengthSq(dp.xy), rSq = sphere.radius * sphere.radius;
    
    if (length(dp.xy) <= sphere.radius)
    {
        dp.z = rSq - lSq;
        vec3 position = sphere.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
        vec3 normal = (position - sphere.center.xyz) / sphere.radius;
        vec4 sphereOutput = vec4(normal * 0.5 + 0.5, 1.0);
        
        float mouseX = iMouse.x / vp.resolution.x;
        float mouseY = iMouse.y / vp.resolution.y;
        
    
    	sLight light;
   		initLight(vec3(cos(iTime), sin(iTime), 2.0), vec3(0.0, 1.0, 1.0), 5.0, light);
    	vec3 lightVec = normalize(light.center.xyz - position.xyz);
    	float d = length(lightVec);
    	float diffuseCoefficient = dot(lightVec, normal);
    	float attenuation = 1.0 / (1.0 + (d/light.intensity) + (d * d)/(light.intensity * light.intensity));
    	float diffuseIntensity =  diffuseCoefficient * attenuation;
        if (mouseX < 1.0)
        {
            light.color.x += mouseX;
        }
        if (mouseY < 1.0)
        {
			light.color.y += mouseY;
        }
        
    	color4 lambert = diffuseIntensity * light.color * sphereOutput;
    
    	return lambert;
    }
    
    
    
    return vec4(0.5);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}